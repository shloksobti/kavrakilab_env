#! /usr/bin/python

import re
import sys

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

def camel_case_to_underscore(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# Like capitalize, but ONLY changes first character
def first_upper_character(s):
    if not s:
        return ""
    return s[0].upper() + s[1:]    

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

def underscore_to_camel_case(word):
    return ''.join(first_upper_character(x) or '_' for x in word.split('_'))

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# Returns (camelcased, underscored, namespaces)
def stylize_class_name(class_name):
    ns = class_name.split("::")
    if len(ns) > 1:
        class_name = ns[-1]
        namespaces = ns[:-1]
    else:
        namespaces = []

    return (underscore_to_camel_case(class_name),
            camel_case_to_underscore(class_name),
            namespaces)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

class_name =   raw_input('Class name:   ')
if not class_name:
    print "Please provide a class name"
    sys.exit(-1)

(class_name_camel, class_name_, class_name_ns) = stylize_class_name(class_name)   

project_name = raw_input('Project name: ')

# Determine namespaces
if not class_name_ns:
    ns_str = raw_input('Namespace(s): ')
    if ns_str:
        class_name_ns = ns_str.split(" ")
    else:
        class_name_ns = []    

super_class =  raw_input('Super class:  ')
if super_class:
    (super_class_camel, super_class_, super_class_ns) = stylize_class_name(super_class)   

header_guard = project_name.upper() + "_" + class_name_.upper() + "_H_"

# Header file

with open(class_name_ + ".h", "w") as f:
    f.write("#ifndef " + header_guard + "\n")
    f.write("#define " + header_guard + "\n")
    f.write("\n")

    if super_class:
        f.write("#include \"" + super_class_ + ".h\"\n\n")
    
    if class_name_ns:
        for ns in class_name_ns:
            f.write("namespace " + ns + "\n{\n")
        f.write("\n")

    f.write("class " + class_name_camel);

    if super_class:
        f.write(" : public " + super_class)

    f.write("\n{\n\n")

    f.write("public:\n\n")
    f.write("    " + class_name_camel + "();\n\n")
    f.write("    " + "~" + class_name_camel + "();\n\n")
    f.write("private:\n\n")
    f.write("};\n\n")

    for ns in class_name_ns:
        f.write("} // end namespace " + ns + "\n\n")

    f.write("#endif\n")

# Source file
with open(class_name_ + ".cpp", "w") as f:
    f.write("#include \"")
    if project_name:
        f.write(project_name + "/")
    f.write(class_name_ + ".h\"\n\n")

    if class_name_ns:
        for ns in class_name_ns:
            f.write("namespace " + ns + "\n{\n")
        f.write("\n")

    f.write("// " + "-" * 100 + "\n\n")
    f.write(class_name_camel + "::" + class_name_camel + "()\n{\n}\n\n")

    f.write("// " + "-" * 100 + "\n\n")
    f.write(class_name_camel + "::~" + class_name_camel + "()\n{\n}\n\n")

    for ns in class_name_ns:
        f.write("} // end namespace " + ns + "\n\n")
    
    
